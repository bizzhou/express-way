package com.expressway.controller;

import com.expressway.model.Auction;
import com.expressway.model.User;
import com.expressway.service.CustomerService;
import com.expressway.service.ManagerLevelService;
import com.expressway.service.impl.FlightServiceImpl;
import com.expressway.util.Helper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
public class ManagerLevelApiController {

    @Autowired
    ManagerLevelService managerLevelService;

    @Autowired
    private FlightServiceImpl flightService;

    @Autowired
    Helper helper;

    @Autowired
    CustomerService customerService;

    /**
     * Get employee who generate the most revenue
     *
     * @return employee ssn
     * @throws SQLException
     */
    @RequestMapping(value = "/manager/revenue/employee-most-revenue", method = RequestMethod.GET)
    public ResponseEntity<Map> employeeWithMostRevenue() throws SQLException {

        Map employee = managerLevelService.getEmployeeWithMostRevenue();
        if (employee != null)
            return new ResponseEntity<>(employee, HttpStatus.OK);
        return new ResponseEntity<>(HttpStatus.BAD_REQUEST);

    }

    /**
     * Get customer who generate the most revenue
     *
     * @return customer account number
     * @throws SQLException
     */
    @RequestMapping(value = "/manager/revenue/customer-most-spent", method = RequestMethod.GET)
    public ResponseEntity<Map> customerWithMostSpent() throws SQLException {

        Map cust = managerLevelService.getCustomerWithMostSpent();
        if (cust != null)
            return new ResponseEntity<>(cust, HttpStatus.OK);
        return new ResponseEntity<>(HttpStatus.BAD_REQUEST);

    }

    /**
     * Get a summary listing of revenue generated by a particular flight
     *
     * @param airline
     * @param flightNumber
     * @return
     * @throws SQLException sample access: http://localhost:8080/manager/revenue?airline=AA&flightNumber=111
     */
    @RequestMapping(value = "/manager/revenue", method = RequestMethod.POST, params = "airline")
    public ResponseEntity<List<Map<String, Object>>> getRevenueByFlight(@RequestParam("airline") String airline,
                                                                        @RequestParam("flightNumber") int flightNumber) {

        List<Map<String, Object>> summary = managerLevelService.getRevenueByFlight(airline, flightNumber);
        System.out.println(summary+"  \n");
        if (summary != null)
            return new ResponseEntity<>(summary, HttpStatus.OK);
        return new ResponseEntity<>(HttpStatus.BAD_REQUEST);

    }

    /**
     * Get a summary listing of revenue generated by a destination city
     *
     * @param destinationCity
     * @return
     * @throws SQLException sample access: http://localhost:8080/manager/revenue?destinationCity=New%20York
     */
    @RequestMapping(value = "/manager/revenue", method = RequestMethod.POST, params = "destinationCity")
    public ResponseEntity<List<Map<String, Object>>> getRevenueByCity(@RequestParam("destinationCity") String destinationCity) {

        List<Map<String, Object>> summary = managerLevelService.getRevenueByCity(destinationCity);

        if (summary != null)
            return new ResponseEntity<>(summary, HttpStatus.OK);
        return new ResponseEntity<>(HttpStatus.BAD_REQUEST);

    }

    /**
     * Get a summary listing of revenue generated by a customer account
     *
     * @param customerAcct
     * @return
     */
    @RequestMapping(value = "/manager/revenue", method = RequestMethod.POST, params = "customerAccount")
    public ResponseEntity<List<Map<String, Object>>> getRevenueByCustomer(@RequestParam("customerAccount") String customerAcct) {

        List<Map<String, Object>> summary = managerLevelService.getRevenueByCustomer(customerAcct);

        if (summary != null)
            return new ResponseEntity<>(summary, HttpStatus.OK);
        return new ResponseEntity<>(HttpStatus.BAD_REQUEST);

    }

    /**
     * Get a list of reservation based on airline id and flight number.
     *
     * @param airline
     * @param flightNumber
     * @return
     */
    @RequestMapping(value = "/manager/reservation", method = RequestMethod.POST, params = "airline")
    public ResponseEntity<List<Map<String, Object>>> getReservationsByFlight(@RequestParam("airline") String airline,
                                                                             @RequestParam("flightNumber") int flightNumber) {

        List<Map<String, Object>> summary = managerLevelService.getReservationByFlight(airline, flightNumber);

        if (summary != null)
            return new ResponseEntity<>(summary, HttpStatus.OK);
        return new ResponseEntity<>(HttpStatus.BAD_REQUEST);

    }

    /**
     * Get a list of reservation made by the customer.
     *
     * @param customerName
     * @return
     */
    @RequestMapping(value = "/manager/reservation", method = RequestMethod.POST, params = "customerName")
    public ResponseEntity<List<Map<String, Object>>> getReservationsByCustomerName(@RequestParam("customerName") String customerName) {

        List<Map<String, Object>> summary = managerLevelService.getReservationByCustomerName(customerName);

        if (summary != null)
            return new ResponseEntity<>(summary, HttpStatus.OK);
        return new ResponseEntity<>(HttpStatus.BAD_REQUEST);

    }

    /**
     * Get monthly sales report
     *
     * @param year  yyyy
     * @param month mm
     * @return monthly sales
     * sample access: http://localhost:8080/manager/monthly-sales-report?year=2011&month=01
     */
    @RequestMapping(value = "/manager/monthly-sales-report", method = RequestMethod.POST)
    public ResponseEntity<Double> getMonthlySalesReport(@RequestParam("year") String year, @RequestParam("month") String month) {

        System.out.println("Getting monthly report");

        String startDate = helper.getStartDate(year, month);
        String endDate = helper.getEndDate(year, month);

        Double sales = managerLevelService.getMonthlySalesReport(startDate, endDate);
        System.out.println("sales " + sales);
        if (sales != -1)
            return new ResponseEntity<>(sales, HttpStatus.OK);
        return new ResponseEntity<>(HttpStatus.BAD_REQUEST);

    }

    /**
     * Get a list of most frequent flights
     *
     * @return
     * @throws SQLException
     */
    @RequestMapping(value = "/manager/flight/most-freq-flights", method = RequestMethod.GET)
    public ResponseEntity<List> getMostFreqFlights() throws SQLException {
        List<Map<String, Object>> result;

        if ((result = customerService.getBestSellerFlights())!= null) {

            return new ResponseEntity<List>(result, HttpStatus.OK);

        } else {

            return new ResponseEntity<List>(HttpStatus.BAD_REQUEST);

        }
    }

    /**
     * Get flights for a given airport
     *
     * @param airportId
     * @return
     * @throws SQLException sample access: http://localhost:8080/flight/get-flights-for-airport?airportId=JFK
     */
    @RequestMapping(value = "manager/flight/get-flights-for-airport", method = RequestMethod.POST)
    public ResponseEntity<List> getFlightsForAirport(@RequestParam("airportId") String airportId) throws SQLException {

        List<Map<String, Object>> result = flightService.getFlightsForAirport(airportId);

        if (result != null)
            return new ResponseEntity<List>(result, HttpStatus.OK);

        return new ResponseEntity<List>(HttpStatus.BAD_REQUEST);

    }


    /**
     * get all user bids
     *
     * @return list of bids
     * @throws SQLException
     */
    @RequestMapping(value = "manager/bids", method = RequestMethod.GET)
    public ResponseEntity<List> getFlightsForAirport() throws SQLException {

        List result = managerLevelService.getBids();

        if (result != null)
            return new ResponseEntity<List>(result, HttpStatus.OK);

        return new ResponseEntity<List>(HttpStatus.BAD_REQUEST);

    }

    /**
     * turn auction to reservation
     *
     * @param auction
     * @return true/false
     * @throws SQLException
     */
    @RequestMapping(value = "manager/auctionToResv", method = RequestMethod.POST)
    public ResponseEntity<Boolean> auctionToResv (@RequestBody final Auction auction) throws SQLException {

        if(managerLevelService.auctionToReservation(auction)){
            return new ResponseEntity<Boolean>(true, HttpStatus.OK);
        }

        return new ResponseEntity<Boolean>(false, HttpStatus.BAD_REQUEST);
    }

    @RequestMapping(value = "manager/all-flights", method = RequestMethod.GET)
    public ResponseEntity<List> allFlights () throws SQLException {
        List result = flightService.getAllFlights();
        if(result != null){
            return new ResponseEntity<List>(result, HttpStatus.OK);
        }

        return new ResponseEntity<List>(HttpStatus.BAD_REQUEST);
    }

    @RequestMapping(value = "manager/flight/ontime", method = RequestMethod.GET)
    public ResponseEntity<List> getOnTimeFlights() {
        List allFlights = flightService.getOnTimeFlights();
        if (allFlights != null)
            return new ResponseEntity<List>(allFlights, HttpStatus.OK);
        return new ResponseEntity<List>(HttpStatus.BAD_REQUEST);
    }

    @RequestMapping(value = "manager/flight/delay", method = RequestMethod.GET)
    public ResponseEntity<List> getDelayedFlights() {
        List allFlights = flightService.getDelayedFlights();
        if (allFlights != null)
            return new ResponseEntity<List>(allFlights, HttpStatus.OK);
        return new ResponseEntity<List>(HttpStatus.BAD_REQUEST);
    }



}


